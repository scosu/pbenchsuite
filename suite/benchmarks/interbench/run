#!/usr/bin/python3

import subprocess
import re
import json

def new_value(value, unit, description):
	return {'value': value, 'unit': unit, 'description': description}

f = open('/proc/cpuinfo', 'r')
procs = f.read()
f.close()
num_procs = 0
for i in procs.splitlines():
	if i.startswith('processor'):
		num_procs += 1

cmd = ['./interbench', '-L', str(num_procs*2), '-c']
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdo, stde = p.communicate()
stdo = stdo.decode()
results = []
current_workload = ""
data = {}
for line in stdo.splitlines():
	if line.strip() == '':
		continue
	if line.startswith('---'):
		m = re.match('.*cpu of (.+) in the.*', line)
		if m == None:
			continue
		current_workload = m.group(1)
		data[current_workload] = {}
		continue
	if line.startswith('Load'):
		continue
	if current_workload == "":
		continue
	if current_workload != 'Gaming':
		m = re.match('(\w+)\s+(\d+\.\d+)\s+\+/\-\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.?\d*)\s+(\d+\.?\d*)\s*', line)
		data[current_workload][m.group(1)] = {
			'latency': new_value(float(m.group(2)), 'ms', 'Latency'),
			'latency_sd': new_value(float(m.group(3)), 'ms', 'Latency Standard Deviation'),
			'max_latency': new_value(float(m.group(4)), 'ms', 'Max Latency'),
			'deadlines': new_value(float(m.group(6)), '%', 'Deadlines Met')
		}
	else:
		m = re.match('(\w+)\s+(\d+\.\d+)\s+\+/\-\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.?\d*)\s*', line)
		data[current_workload][m.group(1)] = {
			'latency': new_value(float(m.group(2)), 'ms', 'Latency'),
			'latency_sd': new_value(float(m.group(3)), 'ms', 'Latency Standard Deviation'),
			'max_latency': new_value(float(m.group(4)), 'ms', 'Max Latency')
		}
print(json.dumps(data, indent=4))

